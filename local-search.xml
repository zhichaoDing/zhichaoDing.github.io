<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/17/hello-world/"/>
    <url>/2022/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue基础学习笔记-模板语法</title>
    <link href="/2022/01/17/vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/01/17/vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><p>双大括号语法</p><figure class="highlight handlebars"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>v-once</code>指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 只会执行一次，数据变化不会更新">&lt;span v-once&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><h3 id="插入-HTML"><a href="#插入-HTML" class="headerlink" title="插入 HTML"></a>插入 HTML</h3><p>双大括号只会将数据解释为普通文本，故需要使用<code>v-html=&quot;xxx&quot;</code>指令<br>注意使用后原有标签包裹内容会被替换掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span>balabala<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Attribute-元素属性"><a href="#Attribute-元素属性" class="headerlink" title="Attribute 元素属性"></a>Attribute 元素属性</h3><p>双大括号不能再 HTMML 属性上使用，提供<code>v-bind</code>,可简写为<code>:id=&quot;myId&quot;</code><br>如果绑定值为<code>null or undefined</code>,该属性就不会被渲染到元素上。<br>但对于<strong>布尔</strong>类型的属性,存在就是<code>true</code>，规则是<code>isDisabled</code></p><ul><li>为 truthy <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="truthy（真值）指的是在布尔值上下文中，转换后的值为真的值，即除 false、0、-0、0n、””、null、undefined 和 NaN 以外皆为真值。MDN">[1]</span></a></sup> ，会渲染</li><li>为 falsy <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="falsy 值 (虚值) 是在 Boolean 上下文中认定为 false 的值。在 JavaScript 中只有 8 个 falsy 值。MDN">[2]</span></a></sup> (除空字符串外)，不会渲染</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&lt;input v-<span class="hljs-keyword">bind</span>:id=<span class="hljs-string">&#x27;myInput&#x27;</span> v-<span class="hljs-keyword">bind</span>:disabled=<span class="hljs-string">&#x27;isDisabled&#x27;</span> /&gt;<br></code></pre></td></tr></table></figure><h3 id="使用-javaScript-表达式"><a href="#使用-javaScript-表达式" class="headerlink" title="使用 javaScript 表达式"></a>使用 javaScript 表达式</h3><p>解析只能是<strong>表达式</strong>，<strong>语句</strong>不生效</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">number</span> + <span class="hljs-number">1</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">ok</span> ? <span class="hljs-string">&#x27;YES&#x27;</span> : <span class="hljs-string">&#x27;NO&#x27;</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">message.split</span>(<span class="hljs-name">&#x27;&#x27;</span>).reverse().join(<span class="hljs-name">&#x27;&#x27;</span>) &#125;&#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="指令动态参数"><a href="#指令动态参数" class="headerlink" title="指令动态参数"></a>指令动态参数</h3><p>可以在指令参数中使用 JavaScript 表达式，方法是用方括号括起来<br>注意 vue 模板对原始属性会统一解析为<strong>小写</strong><br>使用表达式不能有空格，使用引号会有警告，<code>[&#39;&#39;+val] or [val1+val2]</code> 或者用计算属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义变量attrbuteName不生效</span><br>&lt;a v-bind:[attributeName]=<span class="hljs-string">&quot;url&quot;</span>&gt; ... &lt;/a&gt;<br><span class="hljs-comment">//统一使用小写 attributename:&#x27;href&#x27;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributename</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。<br>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> v-<span class="hljs-keyword">on</span>:submit.prevent=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;...&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p><code>v-bind:</code> –&gt; <code>:</code><br><code>v-on:</code> –&gt; <code>@</code></p><h3 id="javaScript-表达式"><a href="#javaScript-表达式" class="headerlink" title="javaScript 表达式"></a>javaScript 表达式</h3><p>只能访问一个受限的全局变量列表，如 Math 和 Date。你不应该在模板表达式中试图访问用户定义的全局变量。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">&#x27;</span><span class="hljs-built_in">Infinity</span><span class="hljs-operator">,</span><span class="hljs-variable">undefined</span><span class="hljs-operator">,</span><span class="hljs-variable">NaN</span><span class="hljs-operator">,</span><span class="hljs-variable">isFinite</span><span class="hljs-operator">,</span><span class="hljs-variable">isNaN</span><span class="hljs-operator">,</span><span class="hljs-variable">parseFloat</span><span class="hljs-operator">,</span><span class="hljs-variable">parseInt</span><span class="hljs-operator">,</span><span class="hljs-variable">decodeURI</span><span class="hljs-operator">,&#x27;</span> <span class="hljs-operator">+</span><br><span class="hljs-operator">&#x27;</span><span class="hljs-variable">decodeURIComponent</span><span class="hljs-operator">,</span><span class="hljs-variable">encodeURI</span><span class="hljs-operator">,</span><span class="hljs-variable">encodeURIComponent</span><span class="hljs-operator">,</span><span class="hljs-variable">Math</span><span class="hljs-operator">,</span><span class="hljs-built_in">Number</span><span class="hljs-operator">,</span><span class="hljs-built_in">Date</span><span class="hljs-operator">,</span><span class="hljs-built_in">Array</span><span class="hljs-operator">,&#x27;</span> <span class="hljs-operator">+</span><br><span class="hljs-operator">&#x27;</span><span class="hljs-variable">Object</span><span class="hljs-operator">,</span><span class="hljs-variable">Boolean</span><span class="hljs-operator">,</span><span class="hljs-built_in">String</span><span class="hljs-operator">,</span><span class="hljs-variable">RegExp</span><span class="hljs-operator">,</span><span class="hljs-built_in">Map</span><span class="hljs-operator">,</span><span class="hljs-built_in">Set</span><span class="hljs-operator">,</span><span class="hljs-variable">JSON</span><span class="hljs-operator">,</span><span class="hljs-variable">Intl</span><span class="hljs-operator">,</span><span class="hljs-variable">BigInt</span><span class="hljs-operator">&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注</strong></p><!--  truthy  falsy注解 --><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>truthy（真值）指的是在布尔值上下文中，转换后的值为真的值，即除 false、0、-0、0n、””、null、undefined 和 NaN 以外皆为真值。<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">MDN</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>falsy 值 (虚值) 是在 Boolean 上下文中认定为 false 的值。在 JavaScript 中只有 8 个 falsy 值。<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">MDN</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node问题汇总</title>
    <link href="/2022/01/14/node%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2022/01/14/node%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="npm-install-安装依赖报错，提示-The-package-lock-json-file-was-created-with-an-old-version-of-npm"><a href="#npm-install-安装依赖报错，提示-The-package-lock-json-file-was-created-with-an-old-version-of-npm" class="headerlink" title="npm install 安装依赖报错，提示 The package-lock.json file was created with an old version of npm"></a>npm install 安装依赖报错，提示 The package-lock.json file was created with an old version of npm</h2><p>解决办法使用淘宝源</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ npm install -g cnpm -registry=https://registry.npm.taobao.org/<br><br>$ cnpm install XX<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue事件系统使用学习</title>
    <link href="/2022/01/12/vue%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/01/12/vue%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>1、v-on 缩写 @ 例如 v-on:submit –&gt; @submit<br>2、可以直接写内联 js 例如 @click=’num+=1’ 但是处理复杂逻辑不可行，所以可以调用方法例如 @click=’add’ ,除了方法还可以内联调用方法 例@click=’add(1)’。当存在需要访问原始 DOM 事件，可以用 特殊变量$event传如方法 例如@click=’add(1,$event)’<br>3、事件处理可以由多个方法 例如 @click=’one(),two($event)’<br>4、时间修饰符 在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求，尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。提供了事件修饰符。修饰符是由点开头的指令后缀来表示的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs code">&lt;!-- 阻止单击事件继续冒泡 --&gt;<br>&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 提交事件不再重载页面 --&gt; //注意 submit 不是绑定在按钮上而是绑定在form上<br>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;<br><br>&lt;!-- 修饰符可以串联 --&gt;<br>&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;<br><br>&lt;!-- 只有修饰符 --&gt;<br>&lt;form @submit.prevent&gt;&lt;/form&gt;<br><br>&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;<br>&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;<br>&lt;div @click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;<br><br>&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;<br>&lt;!-- 即事件不是从内部元素触发的 --&gt;<br>&lt;div @click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;<br><br>&lt;!-- 点击事件将只会触发一次 --&gt;<br>&lt;a @click.once=&quot;doThis&quot;&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>5、使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。<br>例如  </p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git问题</title>
    <link href="/2022/01/12/git%E9%97%AE%E9%A2%98/"/>
    <url>/2022/01/12/git%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="解决-idea-的-gitignore-有时不起作用的问题"><a href="#解决-idea-的-gitignore-有时不起作用的问题" class="headerlink" title="解决 idea 的.gitignore 有时不起作用的问题"></a>解决 idea 的.gitignore 有时不起作用的问题</h2><p>.gitignore 会对部分文件/文件夹失效，大概原因是由于新创建的文件已经出现在 git 本地仓库的缓存，所以.gitignore 就失效了；解决办法就是清空一下 git 仓库的缓存，重新提交一次就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ git rm -r --cached .<br>$ git add .<br>$ git commit -m <span class="hljs-string">&#x27;update .gitignore&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="更换-git-账号"><a href="#更换-git-账号" class="headerlink" title="更换 git 账号"></a>更换 git 账号</h2><p>有时需要更换账号</p><h3 id="查看远程地址"><a href="#查看远程地址" class="headerlink" title="查看远程地址"></a>查看远程地址</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>git remote -v<br></code></pre></td></tr></table></figure><h3 id="更换远程地址"><a href="#更换远程地址" class="headerlink" title="更换远程地址"></a>更换远程地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote set-url origin 新的地址<br></code></pre></td></tr></table></figure><h2 id="git-提交代码遇到-LF-与-CRLF-错误"><a href="#git-提交代码遇到-LF-与-CRLF-错误" class="headerlink" title="git 提交代码遇到 LF 与 CRLF 错误"></a>git 提交代码遇到 LF 与 CRLF 错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LF will be replaced by CRLF<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global core.autocrlf <span class="hljs-literal">true</span> <span class="hljs-comment">#提交时转换为LF，检出时转换为CRLF</span><br></code></pre></td></tr></table></figure><p>顺便了解一下 LF 与 CRLF</p><h3 id="一、LF-和-CRLF-是什么"><a href="#一、LF-和-CRLF-是什么" class="headerlink" title="一、LF 和 CRLF 是什么"></a>一、LF 和 CRLF 是什么</h3><p>CRLF 是 carriage return line feed 的缩写，中文意思是回车换行。LF 是 line feed 的缩写，中文意思也是换行。</p><h3 id="二、LF-和-CRLF-区别"><a href="#二、LF-和-CRLF-区别" class="headerlink" title="二、LF 和 CRLF 区别"></a>二、LF 和 CRLF 区别</h3><ul><li>CRLF: “\r\n”, windows 系统环境下的换行方式</li><li>LF: “\n”, Linux 系统环境下的换行方式</li></ul><h3 id="三、git-关于处理-LF-与-CRLF-的命令"><a href="#三、git-关于处理-LF-与-CRLF-的命令" class="headerlink" title="三、git 关于处理 LF 与 CRLF 的命令"></a>三、git 关于处理 LF 与 CRLF 的命令</h3><p>core.autocrlf 是 git 中处理 line endings 的变量，分别为</p><ul><li><strong>true</strong> : 提交时转换为 LF，检出时转换为 CRLF</li><li><strong>false</strong> : 提交检出均不转换</li><li><strong>input</strong> : 提交时转换为 LF，检出时不转换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#提交时转换为LF，检出时转换为CRLF</span><br>git config --global core.autocrlf <span class="hljs-literal">true</span><br><span class="hljs-comment">#提交检出均不转换</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span><br><span class="hljs-comment">#提交时转换为LF，检出时不转换</span><br>git config --global core.autocrlf input<br></code></pre></td></tr></table></figure><p>core.safecrlf 用于检查文件是否包含混合换行符,分别为</p><ul><li><strong>true</strong> : 拒绝提交包含混合换行符的文件</li><li><strong>false</strong> : 允许提交包含混合换行符的文件（<strong>不建议使用</strong>）</li><li><strong>warn</strong> : 提交包含混合换行符的文件时给出警告</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拒绝提交包含混合换行符的文件</span><br>git config --global core.safecrlf <span class="hljs-literal">true</span><br><span class="hljs-comment">#允许提交包含混合换行符的文件</span><br>git config --global core.safecrlf <span class="hljs-literal">false</span><br><span class="hljs-comment">#提交包含混合换行符的文件时给出警告</span><br>git config --global core.safecrlf warn<br></code></pre></td></tr></table></figure><h2 id="git-新增仓库后提交代码问题"><a href="#git-新增仓库后提交代码问题" class="headerlink" title="git 新增仓库后提交代码问题"></a>git 新增仓库后提交代码问题</h2><p>我现在 github 上建立一个仓库<br>然后本地 <code>bash git init &amp;&amp; git add . &amp;&amp; git commit -m &#39;xxx&#39; </code>后<br><code>bash git remote add origin http://xxx </code><br>git pull 后报错<br>fatal: refusing to merge unrelated histories<br>因为我仓库添加了 md 文件与本地有冲突<br>解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#git pull origin master 将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并</span><br><span class="hljs-comment"># 可以合并两个独立启动仓库的历史 然后更改该冲突文件</span><br>git pull origin master --allow-unrelated-histories<br><span class="hljs-comment">#因为本地的分支没有和远程分支建立联系</span><br>git push --set-upstream origin master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
